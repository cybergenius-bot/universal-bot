import os
import logging
from openai import OpenAI
from aiohttp import web
from openai import AsyncOpenAI
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
    filters,
)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Telegram-–±–æ—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π GPT-4o –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

if not all([TELEGRAM_TOKEN, OPENAI_API_KEY, WEBHOOK_URL]):
    logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç TELEGRAM_TOKEN, OPENAI_API_KEY –∏–ª–∏ WEBHOOK_URL")
    exit(1)

# OpenAI –∫–ª–∏–µ–Ω—Ç
client = OpenAI(api_key=OPENAI_API_KEY)
# OpenAI –∫–ª–∏–µ–Ω—Ç (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
client = AsyncOpenAI(api_key=OPENAI_API_KEY)

SYSTEM_PROMPT = (
    "–¢—ã ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç GPT-4o. –û—Ç–≤–µ—á–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ –∏ –±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã: "
    "–æ—Ç —Å—Ç–æ—Ä–∏—Å –∏ —ç—Å—Å–µ –¥–æ —Å–ª–æ–∂–Ω—ã—Ö –Ω–∞—É—á–Ω—ã—Ö —Ä–∞–±–æ—Ç. –ë—É–¥—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º, —É—á—ë–Ω—ã–º, "
    "–ø–æ–º–æ—â–Ω–∏–∫–æ–º –≤ –ª—é–±—ã—Ö —Ç–µ–º–∞—Ö."
)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø GPT-4o –±–æ—Ç. –ó–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    logger.info("üì© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s", user_text)

    try:
        resp = client.chat.completions.create(
        resp = await client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": user_text}
            ],
            max_tokens=2048,
            temperature=0.8
            temperature=0.8,
        )
        reply = resp.choices[0].message.content.strip()
        await update.message.reply_text(reply)

    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ GPT: %s", e)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT-4o. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# –ó–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º webhook –∏ —É–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º")

    web_app = web.Application()
    web_app.router.add_get("/", lambda request: web.Response(text="ok"))

    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 8080)),
        url_path=f"/webhook/{TELEGRAM_TOKEN}",
        webhook_url=f"{WEBHOOK_URL}/webhook/{TELEGRAM_TOKEN}"
        webhook_url=f"{WEBHOOK_URL}/webhook/{TELEGRAM_TOKEN}",
        webhook_app=web_app,
    )

if __name__ == "__main__":
    main()
