import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from config import TELEGRAM_TOKEN, OPENAI_API_KEY, OPENAI_MODEL
from db import get_user, decrement_messages, has_active_subscription
from openai import AsyncOpenAI
import os


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI GPT-4o
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)


logging.basicConfig(level=logging.INFO)


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
user = await get_user(update.effective_user.id)
await update.message.reply_text(
f"–ü—Ä–∏–≤–µ—Ç! –£ —Ç–µ–±—è {user['messages_left']} —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å —Ç–∞—Ä–∏—Ñ."
)


# –ö–æ–º–∞–Ω–¥–∞ /invite
async def invite(update: Update, context: ContextTypes.DEFAULT_TYPE):
bot_username = (await context.bot.get_me()).username
link = f"https://t.me/{bot_username}?start={update.effective_user.id}"
await update.message.reply_text(f"üéÅ –ü–æ–¥–µ–ª–∏—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏:\n{link}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
logging.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", update.message.text)
tg_id = update.effective_user.id
user = await get_user(tg_id)
subscribed = await has_active_subscription(tg_id)


if subscribed or user["messages_left"] > 0:
if not subscribed:
await decrement_messages(tg_id)


prompt = update.message.text
try:
completion = await openai_client.chat.completions.create(
model=OPENAI_MODEL,
messages=[
{
"role": "system",
"content": (
"–¢—ã ‚Äî GPT-4o, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –±—É–¥—å —Ç–æ —Ä—É—Å—Å–∫–∏–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –∞—Ä–∞–±—Å–∫–∏–π –∏ —Ç.–¥."
" –û—Ç–≤–µ—á–∞–π –≥–ª—É–±–æ–∫–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ–Ω—è—Ç–Ω–æ –∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ —Ç–µ–º–∞–º."
" –¢—ã —É–º–µ–µ—à—å –ø–∏—Å–∞—Ç—å –∫–æ–¥, —Ç–µ–∫—Å—Ç—ã, –Ω–∞—É—á–Ω—ã–µ –∏ –±–∏–∑–Ω–µ—Å-—Ä–∞–±–æ—Ç—ã, –¥–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã, –æ–±—ä—è—Å–Ω—è—Ç—å, —Ä–∞—Å—Å—É–∂–¥–∞—Ç—å."
)
},
{"role": "user", "content": prompt}
],
temperature=0.7
)
reply = completion.choices[0].message.content
await update.message.reply_text(reply)
except Exception as e:
logging.exception("–û—à–∏–±–∫–∞ OpenAI")
await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT.")
else:
keyboard = [
[InlineKeyboardButton("üí° 20 –æ—Ç–≤–µ—Ç–æ–≤ - $10", callback_data="buy_start")],
[InlineKeyboardButton("üß† 200 –æ—Ç–≤–µ—Ç–æ–≤ - $30", callback_data="buy_standard")],
[InlineKeyboardButton("‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç - $50", callback_data="buy_premium")]
]
await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ:", reply_markup=InlineKeyboardMarkup(keyboard))


# –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Webhook
def main():
app = Application.builder().token(TELEGRAM_TOKEN).build()


app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("invite", invite))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))


port = int(os.environ.get("PORT", 8080))
url = os.environ.get("WEBHOOK_URL")
app.run_webhook(listen="0.0.0.0", port=port, webhook_url=f"{url}/bot{TELEGRAM_TOKEN}")


if __name__ == "__main__":
main()
