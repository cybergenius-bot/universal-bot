import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from config import TELEGRAM_TOKEN, TARIFFS, OPENAI_API_KEY, OPENAI_MODEL
from db import get_user, decrement_messages, has_active_subscription
import openai


openai_client = openai.OpenAI(api_key=OPENAI_API_KEY)


logging.basicConfig(level=logging.INFO)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
user = await get_user(update.effective_user.id)
await update.message.reply_text(
f"–ü—Ä–∏–≤–µ—Ç! –£ —Ç–µ–±—è {user['messages_left']} —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å —Ç–∞—Ä–∏—Ñ."
)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
tg_id = update.effective_user.id
user = await get_user(tg_id)
subscribed = await has_active_subscription(tg_id)


if subscribed or user["messages_left"] > 0:
if not subscribed:
await decrement_messages(tg_id)


prompt = update.message.text
try:
completion = openai_client.chat.completions.create(
model=OPENAI_MODEL,
messages=[
{
"role": "system",
"content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∫ –∑–Ω–∞–Ω–∏—è–º. –û—Ç–≤–µ—á–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–Ω–æ, –≥–ª—É–±–æ–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É. –¢—ã —Å–ø–æ—Å–æ–±–µ–Ω —Ä–µ—à–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏, –ø–∏—Å–∞—Ç—å –∫–æ–¥, –ø–æ–º–æ–≥–∞—Ç—å —Å –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏—è–º–∏, –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º–∏. –ù–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π —Å–µ–±—è –≤ —Ç–µ–º–∞—Ö, –ø–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –º–∞–∫—Å–∏–º—É–º–µ."
},
{"role": "user", "content": prompt}
],
temperature=0.7
)
reply = completion.choices[0].message.content
reply += "\n\nüì£ –ü–æ–¥–µ–ª–∏—Å—å –±–æ—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏: https://t.me/SmartBot_OPRO_bot"
await update.message.reply_text(reply)
except Exception as e:
await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT.")
print(e)
else:
keyboard = [
[InlineKeyboardButton(f"üí° 20 –æ—Ç–≤–µ—Ç–æ–≤ - $10", callback_data="buy_start")],
[InlineKeyboardButton(f"üß† 200 –æ—Ç–≤–µ—Ç–æ–≤ - $30", callback_data="buy_standard")],
[InlineKeyboardButton(f"‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç –Ω–∞ 30 –¥–Ω–µ–π - $50", callback_data="buy_premium")]
]
reply_markup = InlineKeyboardMarkup(keyboard)
await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ:", reply_markup=reply_markup)


async def invite(update: Update, context: ContextTypes.DEFAULT_TYPE):
bot_username = (await context.bot.get_me()).username
link = f"https://t.me/{bot_username}?start={update.effective_user.id}"
await update.message.reply_text(f"üéÅ –ü–æ–¥–µ–ª–∏—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏:\n{link}")


def main():
app = Application.builder().token(TELEGRAM_TOKEN).build()


app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("invite", invite))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))


app.run_polling()


if __name__ == "__main__":
main()
