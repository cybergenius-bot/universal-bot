import os
import io
import asyncio
import logging
import subprocess
from typing import Optional
from contextlib import asynccontextmanager

from fastapi import FastAPI, Request, Response
from fastapi.responses import JSONResponse

from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ---------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s [%(message)s]"
)
logger = logging.getLogger("bot")

# ---------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ----------
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
TELEGRAM_WEBHOOK_SECRET = os.getenv("TELEGRAM_WEBHOOK_SECRET", "")
PUBLIC_BASE_URL = os.getenv("PUBLIC_BASE_URL", "").rstrip("/")  # –Ω–∞–ø—Ä. https://your-app.up.railway.app

WEBHOOK_PATH = "/telegram"
WEBHOOK_URL = f"{PUBLIC_BASE_URL}{WEBHOOK_PATH}" if PUBLIC_BASE_URL else ""

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")

# ---------- OpenAI –∫–ª–∏–µ–Ω—Ç (Whisper) ----------
try:
    from openai import OpenAI
    openai_client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None
except Exception as e:
    logger.warning("OpenAI SDK –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: %s", e)
    openai_client = None

# ---------- –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ PTB Application ----------
application: Optional[Application] = None


# ---------- –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ ----------
class NamedBytesIO(io.BytesIO):
    def __init__(self, data: bytes, name: str):
        super().__init__(data)
        self.name = name

async def tg_download_bytes(bot, file_id: str) -> bytes:
    tg_file = await bot.get_file(file_id)
    bio = io.BytesIO()
    await tg_file.download_to_memory(out=bio)
    return bio.getvalue()

def ffmpeg_bytes_to_wav_sync(src_bytes: bytes, input_codec_hint: Optional[str] = None) -> bytes:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WAV 16kHz mono —á–µ—Ä–µ–∑ ffmpeg (CPU).
    input_codec_hint –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –≤—ã–∑—ã–≤–∞—Ç—å —á–µ—Ä–µ–∑ asyncio.to_thread().
    """
    cmd = [
        "ffmpeg",
        "-loglevel", "error",
        "-y",
        "-i", "pipe:0",
        "-vn",             # –±–µ–∑ –≤–∏–¥–µ–æ
        "-ac", "1",        # mono
        "-ar", "16000",    # 16kHz
        "-f", "wav",
        "pipe:1",
    ]
    proc = subprocess.run(
        cmd,
        input=src_bytes,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        check=True,
    )
    return proc.stdout

def whisper_transcribe_sync(data: bytes, name: str, language: Optional[str] = "ru") -> str:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ OpenAI Whisper. –í–µ—Ä–Ω—ë—Ç —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç (response_format='text').
    """
    if not openai_client:
        raise RuntimeError("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    audio_file = NamedBytesIO(data, name)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç str –ø—Ä–∏ response_format="text"
    text = openai_client.audio.transcriptions.create(
        model="whisper-1",
        file=audio_file,
        response_format="text",
        language=language or "ru",
        temperature=0,
    )
    return text  # type: ignore[return-value]


# ---------- –•–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ ----------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ò–ò‚Äë–±–æ—Ç.\n"
        "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ: 5 –∑–∞–ø—Ä–æ—Å–æ–≤. –¢–∞—Ä–∏—Ñ—ã: /pricing. –ü–æ–∫—É–ø–∫–∞: /buy\n"
        "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: /ref\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç/–≥–æ–ª–æ—Å/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ."
    )
    await update.message.reply_text(text)

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–°–ø—Ä–∞–≤–∫–∞: –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç/–≥–æ–ª–æ—Å/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ ‚Äî –æ—Ç–≤–µ—á—É. –ö–æ–º–∞–Ω–¥—ã: /pricing /buy /ref /status")

async def cmd_pricing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–¢–∞—Ä–∏—Ñ—ã: Free 5 Q, $10 ‚Üí 20 Q, $30 ‚Üí 200 Q, $50 ‚Üí –±–µ–∑–ª–∏–º–∏—Ç/–º–µ—Å.")

async def cmd_buy(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü–æ–∫—É–ø–∫–∞ —Å–∫–æ—Ä–æ. –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω PayPal (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) –∏ Telegram Stars (–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ).")

async def cmd_ref(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    me = await context.bot.get_me()
    user = update.effective_user
    ref_param = f"ref{user.id}" if user else "ref0"
    await update.message.reply_text(f"–í–∞—à–∞ —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∞: https://t.me/{me.username}?start={ref_param}")

async def cmd_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–°—Ç–∞—Ç—É—Å: –æ–Ω–ª–∞–π–Ω ‚úÖ")


# ---------- –•–µ–Ω–¥–ª–µ—Ä—ã —Ç–µ–∫—Å—Ç–∞ –∏ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞ ----------
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.text:
        return
    user_text = update.message.text.strip()
    # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å GPT‚Äë4o –æ—Ç–≤–µ—Ç; –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ ‚Äî —ç—Ö–æ-–æ—Ç–≤–µ—Ç
    await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {user_text}")

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.voice:
        return
    try:
        ogg_bytes = await tg_download_bytes(context.bot, update.message.voice.file_id)

        # –ü–æ–ø—ã—Ç–∫–∞ 1: –ø—Ä—è–º–æ –æ—Ç–¥–∞—Ç—å OGG –≤ Whisper
        try:
            text = await asyncio.to_thread(whisper_transcribe_sync, ogg_bytes, "audio.ogg", "ru")
        except Exception as e1:
            logger.warning("OGG‚ÜíWhisper –Ω–µ –ø—Ä–æ—à—ë–ª, –ø—Ä–æ–±—É–µ–º ffmpeg‚ÜíWAV: %s", e1)
            wav_bytes = await asyncio.to_thread(ffmpeg_bytes_to_wav_sync, ogg_bytes)
            text = await asyncio.to_thread(whisper_transcribe_sync, wav_bytes, "audio.wav", "ru")

        text = (text or "").strip()
        if not text:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à GPT‚Äë–ø–∞–π–ø–ª–∞–π–Ω. –ü–æ–∫–∞ ‚Äî –æ—Ç–≤–µ—Ç–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º:
        await update.message.reply_text(text)

    except Exception as e:
        logger.exception("Voice STT failed: %s", e)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç.")

async def handle_audio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.audio:
        return
    try:
        file_bytes = await tg_download_bytes(context.bot, update.message.audio.file_id)
        # –ü—Ä—è–º–∞—è –ø–æ–ø—ã—Ç–∫–∞ (mp3/m4a/wav —á–∞—Å—Ç–æ –ø—Ä–æ—Ö–æ–¥—è—Ç)
        try:
            name = (update.message.audio.file_name or "audio").lower()
            text = await asyncio.to_thread(whisper_transcribe_sync, file_bytes, name, "ru")
        except Exception:
            wav_bytes = await asyncio.to_thread(ffmpeg_bytes_to_wav_sync, file_bytes)
            text = await asyncio.to_thread(whisper_transcribe_sync, wav_bytes, "audio.wav", "ru")
        text = (text or "").strip()
        if not text:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞—É–¥–∏–æ.")
            return
        await update.message.reply_text(text)
    except Exception as e:
        logger.exception("Audio STT failed: %s", e)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç.")

async def handle_video_note(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.video_note:
        return
    try:
        mp4_bytes = await tg_download_bytes(context.bot, update.message.video_note.file_id)

        def mp4_to_wav_sync(src: bytes) -> bytes:
            proc = subprocess.run(
                [
                    "ffmpeg", "-loglevel", "error", "-y",
                    "-i", "pipe:0",
                    "-vn", "-ac", "1", "-ar", "16000",
                    "-f", "wav", "pipe:1",
                ],
                input=src,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                check=True,
            )
            return proc.stdout

        wav_bytes = await asyncio.to_thread(mp4_to_wav_sync, mp4_bytes)
        text = await asyncio.to_thread(whisper_transcribe_sync, wav_bytes, "audio.wav", "ru")
        text = (text or "").strip()
        if not text:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫.")
            return
        await update.message.reply_text(text)
    except Exception as e:
        logger.exception("VideoNote STT failed: %s", e)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


def register_handlers(app_ptb: Application) -> None:
    # –ö–æ–º–∞–Ω–¥—ã
    app_ptb.add_handler(CommandHandler("start", cmd_start))
    app_ptb.add_handler(CommandHandler("help", cmd_help))
    app_ptb.add_handler(CommandHandler("pricing", cmd_pricing))
    app_ptb.add_handler(CommandHandler("buy", cmd_buy))
    app_ptb.add_handler(CommandHandler("ref", cmd_ref))
    app_ptb.add_handler(CommandHandler("status", cmd_status))
    # –ú–µ–¥–∏–∞
    app_ptb.add_handler(MessageHandler(filters.VOICE, handle_voice), group=0)
    app_ptb.add_handler(MessageHandler(filters.AUDIO, handle_audio), group=0)
    app_ptb.add_handler(MessageHandler(filters.VIDEO_NOTE, handle_video_note), group=0)
    # –¢–µ–∫—Å—Ç
    app_ptb.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text), group=1)


def create_ptb_application() -> Application:
    if not TELEGRAM_BOT_TOKEN:
        raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    app_ptb = Application.builder().token(TELEGRAM_BOT_TOKEN).concurrent_updates(True).build()
    register_handlers(app_ptb)
    return app_ptb


# ---------- FastAPI + lifespan ----------
@asynccontextmanager
async def lifespan(app: FastAPI):
    global application
    try:
        application = create_ptb_application()
        await application.initialize()
        await application.start()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω PUBLIC_BASE_URL –∏ —Å–µ–∫—Ä–µ—Ç)
        if WEBHOOK_URL and TELEGRAM_WEBHOOK_SECRET:
            try:
                await application.bot.delete_webhook(drop_pending_updates=True)
            except Exception as e:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π: %s", e)

            await application.bot.set_webhook(
                url=WEBHOOK_URL,
                secret_token=TELEGRAM_WEBHOOK_SECRET,
                drop_pending_updates=True,
                allowed_updates=[
                    "message", "edited_message", "callback_query", "chat_member",
                    "pre_checkout_query", "channel_post", "edited_channel_post",
                    "shipping_query",
                ],
            )
            logger.info("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s", WEBHOOK_URL)
        else:
            logger.warning("PUBLIC_BASE_URL –∏–ª–∏ TELEGRAM_WEBHOOK_SECRET –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –≤–µ–±—Ö—É–∫ –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")

        yield
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: %s", e, exc_info=True)
        raise
    finally:
        try:
            if application:
                try:
                    await application.bot.delete_webhook(drop_pending_updates=False)
                    logger.info("‚úÖ Webhook —É–¥–∞–ª—ë–Ω –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ")
                except Exception as e:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: %s", e)

                await application.stop()
                await application.shutdown()
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: %s", e, exc_info=True)


app = FastAPI(
    title="Telegram Bot",
    description="–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –Ω–∞ FastAPI + PTB",
    version="1.0.0",
    lifespan=lifespan,
)

@app.get("/")
async def root():
    return {"message": "Telegram Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!", "status": "OK"}

@app.get("/health/live")
async def health_live():
    return {"status": "ok"}

@app.get("/health/ready")
async def health_ready():
    try:
        if not application:
            return JSONResponse({"status": "starting"}, status_code=503)
        me = await application.bot.get_me()
        return {"status": "ready", "bot_username": me.username}
    except Exception as e:
        return JSONResponse({"status": "not_ready", "error": str(e)}, status_code=503)

@app.post("/telegram")
async def telegram_webhook(request: Request):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
    secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token", "")
    if TELEGRAM_WEBHOOK_SECRET and secret != TELEGRAM_WEBHOOK_SECRET:
        logger.warning("Webhook 401: —Å–µ–∫—Ä–µ—Ç –Ω–µ —Å–æ–≤–ø–∞–ª")
        return JSONResponse({"ok": False, "error": "unauthorized"}, status_code=401)

    try:
        data = await request.json()
        if not application:
            logger.error("PTB Application –µ—â—ë –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return JSONResponse({"ok": False, "error": "app not ready"}, status_code=503)

        update = Update.de_json(data, application.bot)
        if update:
            await application.process_update(update)
            return {"ok": True}
        else:
            logger.warning("–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π update")
            return {"ok": False, "error": "invalid update"}
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: %s", e, exc_info=True)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200, —á—Ç–æ–±—ã Telegram –Ω–µ –∑–∞—Å—ã–ø–∞–ª —Ä–µ—Ç—Ä–∞—è–º–∏
        return JSONResponse({"ok": True})


if __name__ == "__main__":
    import uvicorn
    uvicorn.run("bot:app", host="0.0.0.0", port=int(os.getenv("PORT", "8000")), reload=False)
